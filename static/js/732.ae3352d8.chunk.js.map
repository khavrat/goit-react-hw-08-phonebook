{"version":3,"file":"static/js/732.ae3352d8.chunk.js","mappings":"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","sources":["components/loginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authOperation from '../../redux/auth/authOperations';\nimport { useNavigate } from 'react-router-dom';\nimport { selectIsLoggedIn } from 'redux/auth/authSlice';\nimport Loader from 'components/loader/Loader';\nimport { toast } from 'react-toastify';\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Input,\n  Button,\n  InputGroup,\n  InputRightElement,\n} from '@chakra-ui/react';\n\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isPasswordError, setIsPasswordError] = useState(false);\n  const [show, setShow] = useState(false);\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      return navigate('/contacts');\n    }\n  }, [isLoggedIn, navigate]);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        setIsEmailError(false);\n        break;\n      case 'password':\n        setPassword(value);\n        setIsPasswordError(false);\n        break;\n      default:\n        console.log('input value: error');\n        return;\n    }\n  };\n\n  const reset = () => {\n    if (isEmailError) {\n      setEmail('');\n    }\n    if (isPasswordError) {\n      setPassword('');\n    }\n    if (!isEmailError && !isPasswordError) {\n      setEmail('');\n      setPassword('');\n    }\n  };\n\n  const handleErrorByBlureEmail = e => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{3,}$/;\n    setIsEmailError(!emailRegex.test(email));\n  };\n\n  const handleErrorByBlurePassword = e => {\n    const passwordRegex = /^(?=.*\\d).{6,}$/;\n    setIsPasswordError(!passwordRegex.test(password));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    handleErrorByBlureEmail();\n    handleErrorByBlurePassword();\n    reset();\n\n    if (!isEmailError && !isPasswordError) {\n      try {\n        const statusData = await dispatch(\n          authOperation.logIn({ email, password })\n        );\n        if (statusData !== null) {\n          toast.error(statusData.payload);\n          reset();\n        } else {\n          reset();\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  const handleClick = () => setShow(!show);\n\n  return (\n    <Loader>\n      <form onSubmit={handleSubmit}>\n        <FormControl isRequired isInvalid={isEmailError || isPasswordError}>\n          <FormLabel htmlFor=\"email\">Email</FormLabel>\n          <Input\n            bg=\"white\"\n            type=\"email\"\n            placeholder=\"Enter email\"\n            name=\"email\"\n            value={email}\n            id=\"email-login\"\n            autoComplete=\"off\"\n            onChange={handleChange}\n            required\n            isInvalid={isEmailError}\n            onBlur={handleErrorByBlureEmail}\n          />\n          {!isEmailError ? (\n            <FormHelperText>Enter the email</FormHelperText>\n          ) : (\n            <FormErrorMessage>Email is required</FormErrorMessage>\n          )}\n          <FormLabel mt=\"50px\" htmlFor=\"password\">\n            Password\n          </FormLabel>\n          <InputGroup>\n            <Input\n              bg=\"white\"\n              pr=\"4.5rem\"\n              type={show ? 'text' : 'password'}\n              placeholder=\"Enter password\"\n              // type=\"password\"\n              name=\"password\"\n              value={password}\n              id=\"password-login\"\n              autoComplete=\"off\"\n              onChange={handleChange}\n              required\n              isInvalid={isPasswordError}\n              onBlur={handleErrorByBlurePassword}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? 'Hide' : 'Show'}\n              </Button>\n            </InputRightElement>{' '}\n          </InputGroup>\n          {!isPasswordError ? (\n            <FormHelperText>\n              Password must have at least 6 characters and at least one digit\n            </FormHelperText>\n          ) : (\n            <FormErrorMessage>\n              Password is not complete and it is required\n            </FormErrorMessage>\n          )}\n          <Button mt=\"30px\" type=\"submit\" colorScheme=\"blue\" size=\"sm\">\n            Log in\n          </Button>\n        </FormControl>\n      </form>\n    </Loader>\n  );\n}\n\nexport default LoginForm;\n","import { Container } from '@chakra-ui/react';\nimport LoginForm from '../../components/loginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <Container as=\"section\" maxWidth=\"4xl\" py=\"20px\">\n      <LoginForm />\n    </Container>\n  );\n};\n\nexport default LoginPage;\n","import {\n  useFormControlContext\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-error.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [FormErrorStylesProvider, useFormErrorStyles] = createContext({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `\n});\nvar FormErrorMessage = forwardRef(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props);\n    const ownProps = omitThemingProps(props);\n    const field = useFormControlContext();\n    if (!(field == null ? void 0 : field.isInvalid))\n      return null;\n    return /* @__PURE__ */ jsx(FormErrorStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),\n        className: cx(\"chakra-form__error-message\", props.className),\n        __css: {\n          display: \"flex\",\n          alignItems: \"center\",\n          ...styles.text\n        }\n      }\n    ) });\n  }\n);\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = forwardRef((props, ref) => {\n  const styles = useFormErrorStyles();\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid))\n    return null;\n  const _className = cx(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */ jsx(\n    Icon,\n    {\n      ref,\n      \"aria-hidden\": true,\n      ...props,\n      __css: styles.icon,\n      className: _className,\n      children: /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          fill: \"currentColor\",\n          d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n        }\n      )\n    }\n  );\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\n\nexport {\n  useFormErrorStyles,\n  FormErrorMessage,\n  FormErrorIcon\n};\n"],"names":["useState","email","setEmail","password","setPassword","isEmailError","setIsEmailError","isPasswordError","setIsPasswordError","show","setShow","dispatch","useDispatch","isLoggedIn","useSelector","selectIsLoggedIn","navigate","useNavigate","useEffect","handleChange","e","currentTarget","name","value","console","log","reset","handleErrorByBlureEmail","test","handleErrorByBlurePassword","handleSubmit","preventDefault","authOperation","statusData","toast","payload","Loader","onSubmit","isRequired","isInvalid","htmlFor","I","bg","type","placeholder","id","autoComplete","onChange","required","onBlur","mt","pr","width","h","size","onClick","colorScheme","as","maxWidth","py","createContext","errorMessage","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","forwardRef","props","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","field","useFormControlContext","jsx","children","chakra","getErrorMessageProps","className","cx","__css","display","alignItems","text","displayName","_className","Icon","icon","fill","d"],"sourceRoot":""}
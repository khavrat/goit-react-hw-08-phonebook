{"version":3,"file":"static/js/542.e1f649e0.chunk.js","mappings":"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","sources":["components/contactForm/ContactForm.jsx","components/contactFilter/ContactFilter.jsx","components/contactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContactAsync } from '../../redux/contacts/contactsOperations';\nimport { toast } from 'react-toastify';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('input value: error');\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const statusData = await dispatch(addContactAsync({ name, number }));\n      if (statusData.error) {\n        toast.error(statusData.payload);\n      } else {\n        reset();\n        toast.success(`${statusData.payload.name} has been added successfully`);\n      }\n    } catch (error) {\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">name</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={handleChange}\n        required\n      />\n      <label htmlFor=\"number\">number</label>\n      <input\n        className=\"input\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        onChange={handleChange}\n        required\n      />\n      <button type=\"submit\">add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, selectFilter } from 'redux/contacts/contactsSlice';\n\nfunction ContactFilter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={changeFilter}\n      />\n    </div>\n  );\n}\n\nexport default ContactFilter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectFilter,\n} from '../../redux/contacts/contactsSlice';\nimport { removeContactAsync } from 'redux/contacts/contactsOperations';\nimport { toast } from 'react-toastify';\n\nfunction ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  console.log('filter ContactList:>> ', filter);\n\n  const onDeleteContact = async contactId => {\n    console.log('putdown to delete');\n    const deletedContact = contacts.find(contact => contact.id === contactId);\n    try {\n      await dispatch(removeContactAsync(contactId));\n      toast.info(`🚀 ${deletedContact.name} has been deleted successfully`, {\n        delay: 250,\n      });\n    } catch (error) {\n      toast.error(`Could not remove contact${deletedContact.name}`);\n    }\n  };\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    console.log('contacts in visibleContacts ContactList :>> ', contacts);\n\n    return contacts.filter(\n      contact =>\n        contact &&\n        contact.name &&\n        contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  // const contactsList = visibleContacts();\n  const contactsList = Array.isArray(contacts) ? visibleContacts() : [];\n  return (\n    <ul>\n      {contactsList.map(visibleContact => (\n        <li key={visibleContact.id}>\n          <span>{visibleContact.name}:</span>\n          <span>{visibleContact.phone}</span>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(visibleContact.id)}\n          >\n            delete{' '}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n","import ContactForm from 'components/contactForm/ContactForm';\nimport ContactFilter from 'components/contactFilter/ContactFilter';\nimport ContactList from 'components/contactList/ContactList';\nimport { useEffect } from 'react';\nimport { fetchContactsAsync } from 'redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContactsAsync(dispatch));\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <ContactFilter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","e","currentTarget","value","console","log","handleSubmit","preventDefault","addContactAsync","statusData","error","toast","payload","onSubmit","htmlFor","className","type","pattern","title","onChange","required","filter","useSelector","selectFilter","setFilter","contacts","selectContacts","onDeleteContact","contactId","deletedContact","find","contact","id","removeContactAsync","delay","contactsList","Array","isArray","normalizedFilter","toLowerCase","includes","visibleContacts","map","visibleContact","phone","onClick","useEffect","fetchContactsAsync"],"sourceRoot":""}
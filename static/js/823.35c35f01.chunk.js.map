{"version":3,"file":"static/js/823.35c35f01.chunk.js","mappings":"qSAuHA,MAhHA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAIL,EACF,OAAOG,EAAS,YAEnB,GAAE,CAACH,EAAYG,IAEhB,IAAMG,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACd,OAAQf,GACN,IAAK,OACHC,EAAQc,GACR,MACF,IAAK,QACHZ,EAASY,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MAIF,QAEE,YADAC,QAAQC,IAAI,sBAGjB,EAEKC,EAAQ,WACZjB,EAAQ,IACRE,EAAS,IACTE,EAAY,GAEb,EAEKc,EAAY,mCAAG,WAAMN,GAAN,8EACnBA,EAAEO,iBADiB,kBAGQvB,EACvBwB,EAAAA,EAAAA,SAAuB,CAAErB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAJvB,OAMM,QAHjBkB,EAHW,QAMFC,OACbC,EAAAA,GAAAA,MAAYF,EAAWG,SACvBP,KAEAA,IAVe,gDAajBF,QAAQC,IAAI,KAAMS,SAbD,yDAAH,sDAkBlB,OACE,gCACE,+CACA,kBAAMC,SAAUR,EAAhB,WACE,kBAAOS,QAAQ,OAAf,mBACA,kBACEC,KAAK,OACL7B,KAAK,OACLe,MAAOf,EACP8B,QAAQ,yHACRC,MAAM,yIACNC,SAAUpB,EACVqB,UAAQ,KAEV,kBAAOL,QAAQ,QAAf,oBACA,kBACEC,KAAK,QACL7B,KAAK,QACLe,MAAOb,EACPgC,aAAa,MACbF,SAAUpB,EACVqB,UAAQ,KAEV,kBAAOL,QAAQ,WAAf,uBACA,kBACEC,KAAK,WACL7B,KAAK,WACLe,MAAOX,EACP0B,QAAQ,mBACRC,MAAM,kEACNG,aAAa,MACbF,SAAUpB,EACVqB,UAAQ,KAaV,mBAAQJ,KAAK,SAAb,2BAIP,EC/GD,EAJqB,WACnB,OAAO,SAAC,EAAD,GACR,C","sources":["components/registrationForm/RegistrationForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport authOperation from 'redux/auth/authOperations';\nimport { selectIsLoggedIn } from '../../redux/auth/authSlice';\nimport { toast } from 'react-toastify';\n\nfunction RegistrationForm() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  //   const [confirmPassword, setConfirmPassword] = useState('');\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      return navigate('/contacts');\n    }\n  }, [isLoggedIn, navigate]);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      //   case 'confirmPassword':\n      //     setConfirmPassword(value);\n      //     break;\n      default:\n        console.log('input value: error');\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setPassword('');\n    // setConfirmPassword('');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const statusData = await dispatch(\n        authOperation.register({ name, email, password })\n      );\n      if (statusData.error!==null) {\n        toast.error(statusData.payload);\n        reset();\n      } else {\n        reset();\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n    // console.log('confirmPassword :>> ', confirmPassword);\n  };\n\n  return (\n    <section>\n      <h1>Registration Form</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          required\n        />\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          pattern=\"^(?=.*\\d).{6,}$\"\n          title=\"Password must have at least 6 characters and at least one digit\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n        {/* <label htmlFor=\"confirmPassword\">Confirm Password</label>\n        <input\n          type=\"password\"\n          name=\"confirmPassword\"\n          value={confirmPassword}\n          pattern=\"^(?=.*\\d).{6,}$\"\n          title=\"Password must have at least 6 characters and at least one digit\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        /> */}\n        <button type=\"submit\">Register</button>\n      </form>\n    </section>\n  );\n}\n\nexport default RegistrationForm;\n","import RegistrationForm from '../../components/registrationForm/RegistrationForm';\n\nconst RegisterPage = () => {\n  return <RegistrationForm />;\n};\n\nexport default RegisterPage;\n"],"names":["dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","isLoggedIn","useSelector","selectIsLoggedIn","navigate","useNavigate","useEffect","handleChange","e","currentTarget","value","console","log","reset","handleSubmit","preventDefault","authOperation","statusData","error","toast","payload","message","onSubmit","htmlFor","type","pattern","title","onChange","required","autoComplete"],"sourceRoot":""}
{"version":3,"file":"static/js/732.65bc7435.chunk.js","mappings":"+SAyFA,MAjFA,WACE,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAIL,EACF,OAAOG,EAAS,YAEnB,GAAE,CAACH,EAAYG,IAEhB,IAAMG,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,OAAQD,GACN,IAAK,QACHd,EAASe,GACT,MACF,IAAK,WACHb,EAAYa,GACZ,MACF,QAEE,YADAC,QAAQC,IAAI,sBAGjB,EAEKC,EAAQ,WACZlB,EAAS,IACTE,EAAY,GACb,EAEKiB,EAAY,mCAAG,WAAMP,GAAN,8EACnBA,EAAEQ,iBADiB,kBAGQjB,EACvBkB,EAAAA,EAAAA,MAAoB,CAAEtB,MAAAA,EAAOE,SAAAA,KAJd,OAME,QAHbqB,EAHW,SAOfC,EAAAA,GAAAA,MAAYD,EAAWE,SACvBN,KAEAA,IAVe,gDAajBF,QAAQC,IAAI,KAAMQ,SAbD,yDAAH,sDAiBlB,OACE,UAACC,EAAA,EAAD,YACE,oCACA,kBAAMC,SAAUR,EAAhB,WACE,kBAAOS,QAAQ,QAAf,oBACA,kBACEC,KAAK,QACLf,KAAK,QACLC,MAAOhB,EACP+B,aAAa,MACbC,SAAUpB,EACVqB,UAAQ,KAEV,kBAAOJ,QAAQ,WAAf,uBACA,kBACEC,KAAK,WACLf,KAAK,WACLC,MAAOd,EACPgC,QAAQ,mBACRC,MAAM,kEACNJ,aAAa,MACbC,SAAUpB,EACVqB,UAAQ,KAEV,mBAAQH,KAAK,SAAb,yBAIP,ECjFD,EAJkB,WAChB,OAAO,SAAC,EAAD,GACR,C","sources":["components/loginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authOperation from '../../redux/auth/authOperations';\nimport { useNavigate } from 'react-router-dom';\nimport { selectIsLoggedIn } from 'redux/auth/authSlice';\nimport Loader from 'components/loader/Loader';\nimport { toast } from 'react-toastify';\n\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      return navigate('/contacts');\n    }\n  }, [isLoggedIn, navigate]);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        console.log('input value: error');\n        return;\n    }\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const statusData = await dispatch(\n        authOperation.logIn({ email, password })\n      );\n      if (statusData !== null) {\n        toast.error(statusData.payload);\n        reset();\n      } else {\n        reset();\n      }\n    } catch (error) {\n      console.log(error.message)\n    }\n  };\n\n  return (\n    <Loader>\n      <h1>Log in</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          pattern=\"^(?=.*\\d).{6,}$\"\n          title=\"Password must have at least 6 characters and at least one digit\"\n          autoComplete=\"off\"\n          onChange={handleChange}\n          required\n        />\n        <button type=\"submit\">Log in</button>\n      </form>\n    </Loader>\n  );\n}\n\nexport default LoginForm;\n","import LoginForm from '../../components/loginForm/LoginForm';\n\nconst LoginPage = () => {\n  return <LoginForm />;\n};\n\nexport default LoginPage;\n"],"names":["useState","email","setEmail","password","setPassword","dispatch","useDispatch","isLoggedIn","useSelector","selectIsLoggedIn","navigate","useNavigate","useEffect","handleChange","e","currentTarget","name","value","console","log","reset","handleSubmit","preventDefault","authOperation","statusData","toast","payload","message","Loader","onSubmit","htmlFor","type","autoComplete","onChange","required","pattern","title"],"sourceRoot":""}
{"version":3,"file":"static/js/823.0695845d.chunk.js","mappings":"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","sources":["components/registrationForm/RegistrationForm.jsx","pages/RegisterPage/RegisterPage.jsx","../node_modules/@chakra-ui/form-control/dist/chunk-3GP7MWMA.mjs"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport authOperation from 'redux/auth/authOperations';\nimport { selectIsLoggedIn } from '../../redux/auth/authSlice';\nimport { toast } from 'react-toastify';\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Input,\n  Button,\n  InputGroup,\n  InputRightElement,\n  useColorMode,\n} from '@chakra-ui/react';\nimport { getInputColor } from '../colorModeSwitcher/ColorModeStyles';\n\nfunction RegistrationForm() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isPasswordError, setIsPasswordError] = useState(false);\n  const [show, setShow] = useState(false);\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const navigate = useNavigate();\n  const { colorMode } = useColorMode();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      return navigate('/contacts');\n    }\n  }, [isLoggedIn, navigate]);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        setIsNameError(false);\n        break;\n      case 'email':\n        setEmail(value);\n        setIsEmailError(false);\n        break;\n      case 'password':\n        setPassword(value);\n        setIsPasswordError(false);\n        break;\n      default:\n        console.log('input value: error');\n        return;\n    }\n  };\n\n  const reset = () => {\n    if (isNameError) {\n      setName('');\n    }\n    if (isEmailError) {\n      setEmail('');\n    }\n    if (isPasswordError) {\n      setPassword('');\n    }\n    if (!isNameError && !isEmailError && !isPasswordError) {\n      setName('');\n      setEmail('');\n      setPassword('');\n    }\n  };\n\n  const handleErrorByBlureName = e => {\n    const nameRegex = /^[a-zA-Z\\s-]{2,}$/;\n    setIsNameError(!nameRegex.test(name));\n  };\n\n  const handleErrorByBlureEmail = e => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{3,}$/;\n    setIsEmailError(!emailRegex.test(email));\n  };\n\n  const handleErrorByBlurePassword = e => {\n    const passwordRegex = /^(?=.*\\d).{6,}$/;\n    setIsPasswordError(!passwordRegex.test(password));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    handleErrorByBlureName();\n    handleErrorByBlureEmail();\n    handleErrorByBlurePassword();\n    reset();\n    if (!isNameError && !isEmailError && !isPasswordError) {\n      try {\n        const statusData = await dispatch(\n          authOperation.register({ name, email, password })\n        );\n        if (statusData.error !== null) {\n          toast.error(statusData.payload);\n          reset();\n        } else {\n          reset();\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n  };\n\n  const handleClick = () => setShow(!show);\n\n  return (\n    <section>\n      <form onSubmit={handleSubmit}>\n        <FormControl\n          isRequired\n          isInvalid={isNameError || isEmailError || isPasswordError}\n        >\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\n          <Input\n            bg={getInputColor(colorMode)}\n            type=\"text\"\n            placeholder=\"Enter name\"\n            name=\"name\"\n            value={name}\n            id=\"name-regist\"\n            autoComplete=\"off\"\n            onChange={handleChange}\n            required\n            isInvalid={isNameError}\n            onBlur={handleErrorByBlureName}\n          />\n          {!isNameError ? (\n            <FormHelperText>\n              The name can contain only letters, spaces and dashes and should be\n              at least 2 characters\n            </FormHelperText>\n          ) : (\n            <FormErrorMessage>Name is required</FormErrorMessage>\n          )}\n\n          <FormLabel mt=\"50px\" htmlFor=\"email\">\n            Email\n          </FormLabel>\n          <Input\n            bg={getInputColor(colorMode)}\n            type=\"email\"\n            placeholder=\"Enter email\"\n            name=\"email\"\n            value={email}\n            id=\"email-regist\"\n            autoComplete=\"off\"\n            onChange={handleChange}\n            required\n            isInvalid={isEmailError}\n            onBlur={handleErrorByBlureEmail}\n          />\n          {!isEmailError ? (\n            <FormHelperText>Enter the email</FormHelperText>\n          ) : (\n            <FormErrorMessage>\n              Email is not complete and it is required\n            </FormErrorMessage>\n          )}\n          <FormLabel mt=\"50px\" htmlFor=\"password\">\n            Password\n          </FormLabel>\n          <InputGroup>\n            {' '}\n            <Input\n              bg={getInputColor(colorMode)}\n              pr=\"4.5rem\"\n              type={show ? 'text' : 'password'}\n              placeholder=\"Enter password\"\n              name=\"password\"\n              value={password}\n              id=\"password-regist\"\n              autoComplete=\"off\"\n              onChange={handleChange}\n              required\n              isInvalid={isPasswordError}\n              onBlur={handleErrorByBlurePassword}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? 'Hide' : 'Show'}\n              </Button>\n            </InputRightElement>{' '}\n          </InputGroup>\n          {!isPasswordError ? (\n            <FormHelperText>\n              Password must have at least 6 characters and at least one digit\n            </FormHelperText>\n          ) : (\n            <FormErrorMessage>\n              Password is not complete and it is required\n            </FormErrorMessage>\n          )}\n\n          <Button mt=\"30px\" type=\"submit\" colorScheme=\"blue\" size=\"sm\">\n            Register\n          </Button>\n        </FormControl>\n      </form>\n    </section>\n  );\n}\n\nexport default RegistrationForm;\n\nRegistrationForm.propTypes = {\n  isLoggedIn: PropTypes.bool.isRequired,\n  navigate: PropTypes.func.isRequired,\n};","import { Container } from '@chakra-ui/react';\nimport RegistrationForm from '../../components/registrationForm/RegistrationForm';\n\nconst RegisterPage = () => {\n  return (\n    <Container as=\"section\" maxWidth=\"4xl\" py=\"20px\">\n      <RegistrationForm />\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n","import {\n  useFormControlContext\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-error.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [FormErrorStylesProvider, useFormErrorStyles] = createContext({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `\n});\nvar FormErrorMessage = forwardRef(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props);\n    const ownProps = omitThemingProps(props);\n    const field = useFormControlContext();\n    if (!(field == null ? void 0 : field.isInvalid))\n      return null;\n    return /* @__PURE__ */ jsx(FormErrorStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),\n        className: cx(\"chakra-form__error-message\", props.className),\n        __css: {\n          display: \"flex\",\n          alignItems: \"center\",\n          ...styles.text\n        }\n      }\n    ) });\n  }\n);\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = forwardRef((props, ref) => {\n  const styles = useFormErrorStyles();\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid))\n    return null;\n  const _className = cx(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */ jsx(\n    Icon,\n    {\n      ref,\n      \"aria-hidden\": true,\n      ...props,\n      __css: styles.icon,\n      className: _className,\n      children: /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          fill: \"currentColor\",\n          d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n        }\n      )\n    }\n  );\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\n\nexport {\n  useFormErrorStyles,\n  FormErrorMessage,\n  FormErrorIcon\n};\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","isNameError","setIsNameError","isEmailError","setIsEmailError","isPasswordError","setIsPasswordError","show","setShow","dispatch","useDispatch","isLoggedIn","useSelector","selectIsLoggedIn","navigate","useNavigate","colorMode","useColorMode","useEffect","handleChange","e","currentTarget","value","console","log","reset","handleErrorByBlureName","test","handleErrorByBlureEmail","handleErrorByBlurePassword","handleSubmit","preventDefault","authOperation","statusData","error","toast","payload","message","onSubmit","isRequired","isInvalid","htmlFor","I","bg","getInputColor","type","placeholder","id","autoComplete","onChange","required","onBlur","mt","pr","width","h","size","onClick","colorScheme","as","maxWidth","py","createContext","errorMessage","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","forwardRef","props","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","field","useFormControlContext","jsx","children","chakra","getErrorMessageProps","className","cx","__css","display","alignItems","text","displayName","_className","Icon","icon","fill","d"],"sourceRoot":""}